from fractions import Fraction
import math

if __name__ == '__main__':
    
    
    def harmonics():
        n = 1
        while n < 500:
            yield Fraction(1,n)
            n += 1
            
    print(list(harmonics()))
    
    
    def fn1():
        n=0
        while n < 500:
            yield pow(3,n)
            n +=1
            
    
    def fn2():
        val = Fraction(1)
        while True:
            yield val
            val *=3
            
    def fn3():
        n = 0
        m = 1
        while n < 500:
            n += m
            yield n
            m += 1
            
    
    
    
    def someValues(seq):
        L=[10 ** k for k in range(10)]
        for n in L:
            print ("{:>15}: {}".format(n, seq(n)))

    seq = lambda n: (((n+1)/n)**n)

    print (someValues(seq))

    
    def fn4(n):
        fnList = []
        s = 2
        while len(fnList) < n:
            for r in range(1,s):
                if r < s:
                    fnList.append(r / s)
            s += 1
            r = 1
        return fnList[n-1]    
    
    print (fn4(200))