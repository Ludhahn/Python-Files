if __name__=='__main__':
    
    
    def perms(L):
        if len(L) <= 1:
            return [L]
        return [[L[i]] + P for i in range(len(L)) for P in perms(L[:i] + L[i+1:])]
    
    print (perms([41,42,43,44]))

    def fact(n):
        if n < 2:
            return 1
        return n * fact(n-1)
    
    #print (fact(100))
    
    #entspricht n fakultät durch n-k fakultät
    def kperms(L,K):
        if K == 0:
            return [[]]
        return [[L[i]] + P for i in range(len(L)) for P in kperms(L[:i] + L[i+1:],K-1)]


    #print (kperms([41,42,43,44],3))
    
    def ktup(L,K):
        if K == 0:
            return [[]]
        return [[L[i]] + P for i in range(len(L)) for P in ktup(L,K-1)]
    
    def combs (L,k):
        if k == 0:
            return {frozenset()}
        return {frozenset([x]) | P for x in L for P in combs(L-{x},k-1)}
    
    #entspricht n fakultät durch n-k fakultät mal k fakultät
    def binom(n,k):
        return fact(n) // (fact(k) * fact(n-k))
    
    print (binom(7,6))
    #print (len(combs({1,2,3,4,5,6,7},3)))
    #print (len(ktup([1,2,3,4,5,6,7],3)))
    
    def powerSet (A):
        if A == set():
            return[set()]
        a = A.pop()
        P = powerSet(A)
        return P + [X | {a} for X in P]
    
    print (powerSet({1,2,3,4}))
    
    def powerSet2 (A):
        if A == set():
            return {frozenset()}
        a = A.pop()
        P = powerSet2(A)
        return P | set(X | {a} for X in P)
            
    
    print (powerSet2({1,2,3,4}))